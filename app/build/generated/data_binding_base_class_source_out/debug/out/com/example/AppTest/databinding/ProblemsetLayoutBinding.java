// Generated by view binder compiler. Do not edit!
package com.example.AppTest.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ListView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.example.AppTest.R;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ProblemsetLayoutBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final FloatingActionButton cfb2;

  @NonNull
  public final TextView labelup;

  @NonNull
  public final ListView myList;

  @NonNull
  public final TextView textView10;

  @NonNull
  public final View view;

  private ProblemsetLayoutBinding(@NonNull ConstraintLayout rootView,
      @NonNull FloatingActionButton cfb2, @NonNull TextView labelup, @NonNull ListView myList,
      @NonNull TextView textView10, @NonNull View view) {
    this.rootView = rootView;
    this.cfb2 = cfb2;
    this.labelup = labelup;
    this.myList = myList;
    this.textView10 = textView10;
    this.view = view;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ProblemsetLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ProblemsetLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.problemset_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ProblemsetLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cfb2;
      FloatingActionButton cfb2 = rootView.findViewById(id);
      if (cfb2 == null) {
        break missingId;
      }

      id = R.id.labelup;
      TextView labelup = rootView.findViewById(id);
      if (labelup == null) {
        break missingId;
      }

      id = R.id.myList;
      ListView myList = rootView.findViewById(id);
      if (myList == null) {
        break missingId;
      }

      id = R.id.textView10;
      TextView textView10 = rootView.findViewById(id);
      if (textView10 == null) {
        break missingId;
      }

      id = R.id.view;
      View view = rootView.findViewById(id);
      if (view == null) {
        break missingId;
      }

      return new ProblemsetLayoutBinding((ConstraintLayout) rootView, cfb2, labelup, myList,
          textView10, view);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
